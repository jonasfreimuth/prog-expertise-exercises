{
	// Place your prog-expertise-labs workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Cpp Makefile": {
		"scope": "makefile",
		"prefix": "make",
		"body": [
			"# where prject specific header files lie",
			"INC = ${1:./}",
			"",
			"# where object files will be stored",
			"OBJ = ${2:./build/}",
			"",
			"# file extension for executables",
			"EXT = ${3:.bin}",
			"",
			"# compiler path",
			"CC =  ${4:g++}",
			"",
			"# compiler flags",
			"CF = ${5:-std=c++17}",
			"",
			"$0",
			"",		
			"build:",
			"\tmkdir $(OBJ)",
			"",
			".PHONY: clean, cleanall",
			"",
			"# remove object files that were created during compilation",
			"clean:",
			"\trm -rf $(OBJ)",
			"",
			"# reset directory to the state before compilation, deleting also",
			"# all binary files",
			"cleanall:",
			"\trm -rf $(OBJ) *$(EXT)"
		]
	},

	"Cpp Makefile .o recipe": {
		"scope": "makefile",
		"prefix": "recipe",
		"body": [
			"$(OBJ)$1.o: $1.cpp ${2:$(INC)argparse.hpp} $(OBJ)",
			"\t$(CC) -c $1.cpp -o $(OBJ)$1.o  $(CF)"
		]
	},

	"Cpp Makefile app recipe": {
		"scope": "makefile",
		"prefix": "compile",
		"body": [
			"compile: $(OBJ)main.o $(OBJ)$1.o $0", 
	 		"$(CC) $(OBJ)main.o $(OBJ)$1.o $0 -o $1$(EXT) $(CF)",
			"",
			"$1$(EXT): $(OBJ)main.o $(OBJ)$1.o $0",
	 		"$(CC) $(OBJ)main.o $(OBJ)$1.o $0 -o $1$(EXT) $(CF)"
		]
	},

	"Cpp text file function": {
		"scope": "cpp",
		"prefix": "filefunc",
		"body": [
			"${1:Output Type} ${2:Function Name}(${3:std::string filename}) {",
			"\tstd::ifstream ${4:infile};",
			"\tstd::string line = \"\";",
			"\t",
			"\t$4.open(${5:filename});",
			"\t",
			"\twhile (std::getline($4, line)) {",
			"\t\t$0",
			"\t}",
			"\treturn ();",
			"};"
		]
	},

	"Cpp for loop vector": {
		"scope": "cpp",
		"prefix": "forvec",
		"body": [
			"for (auto ${2:i} = $1.begin(); $2 != $1.end(); $2 ++) {",
			"\t${0:// code, access elemtent via * $2}",
			"}"
		]
	},

	"Cpp value in vector": {
		"scope": "cpp",
		"prefix": "find",
		"body": [
			"if (find(${1:vector_iterator}.begin(), $1.end(), ${2:value_to_find}) != $1.end()) {",
			"\t${0: // code}",
			"}"
		]
	},

	"Cpp sort map into vector": {
		"scope": "cpp",
		"prefix": "sortmap",
		"body": [
			"for (int ${1:i} = 0; $1 < ${2:map_name}.size(); $1 ++) {  ",
			"\t// from https://stackoverflow.com/questions/30611709/find-element-with-max-value-from-stdmap#30611887:",
			"\tauto max = std::max_element($2.begin(), $2.end(),",
			"\t\t[](const std::pair<${3:std::string}, ${4:int}>& p1, const std::pair<$3, $4>& p2) {",
			"\t\t\treturn p1.second < p2.second; ",
			"\t\t});",
			"\t",
			"\t${5:vector_name}.push_back( std::make_tuple( ${0:filename, max->first, std::to_string(max->second)} ) );",
			"\t",
			"\tmax->second = 0;",
			"}"
		]
	},

	"Cpp tuple get": {
		"scope": "cpp",
		"prefix": "get",
		"body": "std::<$2>($1)$0"
	},

	"Cpp regex_search": {
		"scope": "cpp",
		"prefix": "search",
		"body": "std::regex_search(${1:line}, $2)"
	},

	"Cpp regex_match": {
		"scope": "cpp",
		"prefix": "match",
		"body": "std::regex_match(${1:line}, $2)"
	},

	"Cpp make regex": {
		"scope": "cpp",
		"prefix": "rx",
		"body": "std::regex $1(\"$2\")"
	},

	"Cpp replace regex": {
		"scope": "cpp",
		"prefix": "replace",
		"body": "std::regex_replace(${1:line}, ${2:regexpr}, \"${3:\\$1}\")"
	},

	"Cpp Argparse Init": {
		"scope": "cpp",
		"prefix": "apinit",
		"body": [
			"argparse::ArgumentParser ${10:parser}(\"$TM_FILENAME\");"
		]
	},

	"Cpp Argparse add switch argument": {
		"scope": "cpp",
		"prefix": "apas",
		"body": [			
			"${10:parser}.add_argument(\"-${1:shortForm}\", \"--${2:longForm}\")",
			"\t.help(\"$3\")",
			"\t.default_value(${4|false, true|})",
			"\t.implicit_value(${5|true, false|});"
		]
	},

	"Cpp Argparse add typed argument": {
		"scope": "cpp",
		"prefix": "apat",
		"body": [			
			"${10:parser}.add_argument(\"-${1:shortForm}\", \"--${2:longForm}\")",
			"\t.help(\"$3\")",
			"\t.default_value(\"$4\")",
			"\t.action([](const std::string& value) {",
			"\t\treturn ${5:std::stoi(value)};",
			"\t});"
		]
	},

	"Cpp Argparse add positional argument": {
		"scope": "cpp",
		"prefix": "apap",
		"body": [			
			"$1.add_argument(\"$2\")",
			"\t.default_value(\"$3\")",
			"\t.help(\"$4\");"
		]
	},

	"Cpp Argparse add arg with validity check": {
		"scope": "cpp",
		"prefix": "apaval",
		"body": [			
			"${1:parser}.add_argument(\"-${2:shortForm}\", \"--${3:longForm}\")",
			"\t.help(\"$4\")",
			"\t${5|.default_value(\"\"), .required()|}",
			"\t.action([](const std::string& value) {",
			"\t\tif (!$6) {",
			"\t\t\texit(${7:1})",
			"\t\t}",
			"\t\treturn ${8:(value)};",
			"\t});"
		]
	},

	"Cpp Argparse parse args": {
		"scope": "cpp",
		"prefix": "appa",
		"body": [
			"try {",
			"\t${10:parser}.parse_args(argc, argv);",
			"} catch (const std::runtime_error& err) {",
			"\tstd::cout << err.what() << std::endl;",
			"\tstd::cout << $10;",
			"\texit(0);",
			"}"
		]
	},

	"Cpp Argparse get argument": {
		"scope": "cpp",
		"prefix": "apget",
		"body": "${1:std::string} $2 = ${3:parser}.get<$1>(\"--$2\");$0"
	}
}